package cn.com.choicesoft.util;

import android.app.Activity;
import android.util.Log;
import cn.com.choicesoft.R;
import cn.com.choicesoft.bean.*;
import cn.com.choicesoft.exception.ServerResponseException;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ï¿½ï¿½ï¿½ï¿½xmlï¿½ï¿½ï¿½ï¿½
 * 
 */
public class AnalyticalXmlUtil {
	private static String TAG="AnalyticalXmlUtil";
	public static User loginReceiveXml(String result) throws ServerResponseException {
		User user = null;
		try {
			XmlPullParser parser = XmlPullParserFactory.newInstance()
					.newPullParser();
			parser.setInput(new StringReader(result));
			// parser.setInput(inStream, "UTF-8");
			int eventType = parser.getEventType();
			while (eventType != XmlPullParser.END_DOCUMENT) {
				String name = parser.getName();
				// Log.d("WelcomeActivity", name + "");
				switch (eventType) {
				case XmlPullParser.START_DOCUMENT:
					break;
				case XmlPullParser.START_TAG:// ï¿½ï¿½Ê¼Ôªï¿½ï¿½ï¿½Â¼ï¿½
					if ("response".equalsIgnoreCase(name)) {
						String response = parser.nextText();
						if (!"00".equals(response)) {
							throw new ServerResponseException(
									"response error... the error code is "
											+ response, response);
						}
					} else if ("user".equalsIgnoreCase(name)) {
						user = new User();
						Log.d("WelcomeActivity", name + "");
						user.setEmp(parser.getAttributeValue(null, "emp"));
						user.setName(parser.getAttributeValue(null, "name"));
						user.setDept(parser.getAttributeValue(null, "dept"));
						user.setPassword(parser.getAttributeValue(null, "pass"));
						user.setWaiter(parser.getAttributeValue(null, "waiter"));
					}
					// else if("emp".equalsIgnoreCase(name)){
					// user.setEmp(parser.nextText());
					//
					// }else if("name".equalsIgnoreCase(name)){
					// user.setName(parser.nextText());
					// }
					break;
				case XmlPullParser.END_TAG:// ï¿½ï¿½ï¿½ï¿½Ôªï¿½ï¿½ï¿½Â¼ï¿½
					break;
				}
				eventType = parser.next();// ï¿½ï¿½È¡ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Úµï¿½ï¿½Ö?
			}
		} catch (XmlPullParserException e) {
			Log.d("WelcomeActivity", "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½");
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return user;

	}

	/**
	 * ï¿½ï¿½ï¿½ï¿½XNLï¿½ï¿½ï¿½ï¿½
	 * 
	 * @param cla
	 *            ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Êµï¿½ï¿½(Êµï¿½ï¿½ï¿½Úµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö¶Î±ï¿½ï¿½ï¿½ÎªStringï¿½ï¿½ï¿½ï¿½)
	 * @param result
	 * @Author:M.c
	 */
	public static List<Object> anaXML(Class<?> cla, String result) {
		List<Object> list = null;// returnï¿½ï¿½ï¿½ï¿½
		try {
			XmlPullParser parser = XmlPullParserFactory.newInstance()
					.newPullParser();
			parser.setInput(new StringReader(result));
			Method[] methods = cla.getMethods();// ï¿½ï¿½È¡Êµï¿½ï¿½ï¿½Úµï¿½ï¿½ï¿½ï¿½Ð·ï¿½ï¿½ï¿½
			String className = cla.getSimpleName();// Êµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
			int eventType = parser.getEventType();
			list = new ArrayList<Object>();// Êµï¿½ï¿½Ø¶ï¿½ï¿½ï¿?
			while (eventType != XmlPullParser.END_DOCUMENT) {
				String name = parser.getName();// ï¿½ï¿½È¡ï¿½Úµï¿½Name
				if (className.equalsIgnoreCase(name)
						&& eventType == XmlPullParser.START_TAG) {// ï¿½Ð¶ï¿½ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½Êµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
					Object o = cla.newInstance();// Êµï¿½å»¯Êµï¿½ï¿½ï¿½ï¿½
					for (int j = 0; j < methods.length; j++) {// Ñ­ï¿½ï¿½Êµï¿½ï¿½ï¿½ÚµÄ·ï¿½ï¿½ï¿½
						String metName = methods[j].getName();// ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½Name
						for (int i = 0; i < parser.getAttributeCount(); i++) {// Ñ­ï¿½ï¿½xmlï¿½Úµï¿½Öµ
							String attributeName = "set"
									+ parser.getAttributeName(i);// Îªï¿½ï¿½È¡ï¿½ï¿½XMLï¿½ï¿½ï¿½Ö¶ï¿½Nameï¿½ï¿½setï¿½Ö·ï¿½ï¿½Ô±ï¿½ï¿½ï¿½ï¿½ï¿½setï¿½ï¿½ï¿½ï¿½Æ¥ï¿½ï¿½
							if (attributeName.equalsIgnoreCase(metName)) {// ï¿½Ð¶ï¿½ï¿½Ö¶ï¿½nameï¿½ï¿½Êµï¿½å·½ï¿½ï¿½ï¿½ï¿½ï¿½Ç·ï¿½ï¿½ï¿½Í¬
								Method setMethod = cla.getMethod(metName,String.class);
								setMethod.invoke(o, parser.getAttributeValue(i));
							}
						}
					}
					list.add(o);
				}
				eventType = parser.next();// ï¿½ï¿½È¡ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Úµï¿½ï¿½Ö?
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	
	/**
	 * Î´ï¿½ï¿½ï¿½Ë¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
	 * @param result
	 * @return
	 */
	public static Map<String,Object> analysisProductW(Activity activity,String result){
		Map<String,Object> mapList=new HashMap<String,Object>();
		String[] res=result.split("#");
		String[] res1=res[0].split(";");
		String[] res2=ValueUtil.isNotEmpty(res[1])?res[1].split(";"):null;
		try {
			//------------------ï¿½ï¿½ï¿½ï¿½----------------------
			List<Map<String,String>> orderList=new ArrayList<Map<String,String>>();
			for (int i = 0; i < res1.length; i++) {
				String[] str=res1[i].split("@");
				Map<String,String> map=new HashMap<String,String>();
				map.put("mark", str[0]);
				map.put("orderId", str[1]);
				map.put("pkId",str[2]);
				map.put("pcode",str[3]);
				if(ValueUtil.isNaNofDouble(str[9])>0){//ï¿½Ð¶ï¿½ï¿½Ç·ï¿½Îªï¿½ï¿½Æ· ï¿½ï¿½ï¿½ï¿½Æ·ï¿½ï¿½Ê¾ï¿½ï¿½
					map.put("pcname",str[4]+"-"+activity.getString(R.string.give)+"-"+str[9]);
				}else{
					map.put("pcname",str[4]);
				}
				map.put("tpcode",str[5]);
				map.put("tpname",str[6]);
				map.put("tpnum",str[7]);
				if(str[15].equals("1")){//ï¿½ï¿½ï¿½ï¿½Çµï¿½Ò»ï¿½ï¿½Î»È¡pcount ï¿½ï¿½ï¿½ï¿½ÇµÚ¶ï¿½ï¿½ï¿½Î? È¡weight[ï¿½Ú¶ï¿½ï¿½ï¿½Î»ï¿½ï¿½ï¿½ï¿½]
					map.put("pcount",str[8]);
				}else if(str[15].equals("2")){
					map.put("pcount",str[14]);
				}
				map.put("price",str[12]);
				map.put("promonum",str[9]);
				map.put("fujiaprice",str[13]);
				if(ValueUtil.isNotEmpty(str[10])){
					map.put("fujiacode",str[10].replace("!", ";"));
					map.put("fujianame",str[11].replace("!", ";"));
				}
				map.put("weight",str[14]);
				map.put("weightflg",str[15]);
				map.put("unit",str[16]);
				map.put("istc",str[17]);
				if (str.length>18) {
					map.put("fujiacount", str[18]);
					map.put("unitcode", str[19]);
					map.put("unitname", str[20]);
					map.put("istemp", str[21]);
					if (str.length > 22) {
						map.put("tempcode", str[22]);
						map.put("tempname", str[23]);
					}
				}
				orderList.add(map);
			}
			//----
			mapList.put("orderList", orderList);
			//-------------ï¿½Å»ï¿½È¯--------------------------
			if(ValueUtil.isNotEmpty(res2)){
				List<Map<String,String>> couponList=new ArrayList<Map<String,String>>();
				for (int i = 0; i < res2.length; i++) {
					String[] str=res2[i].split("@");
					Map<String,String> map=new HashMap<String,String>();
					map.put("mark", str[0]);
					map.put("orderId", str[1]);
					map.put("cName",str[2]);
					map.put("cMoney",str[3]);
					couponList.add(map);
				}
				mapList.put("couponList", couponList);
			}
			//--------------ï¿½ï¿½ï¿½ï¿½---------------------------
			String[] res3=res[2].split("@");
			Map<String,String> manMap=new HashMap<String,String>();
			manMap.put("mark", res3[0]);
			manMap.put("manCounts",res3[1]);
			manMap.put("womanCounts","0");
			if(res3.length>2){
				manMap.put("womanCounts",res3[2]);
			}
			mapList.put("manMap", manMap);
			//-----------------È«ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½-----------------
			if(res.length<4||ValueUtil.isEmpty(res[3])){
				mapList.put("addItem", null);
			}else{
				String res4[]=res[3].split(";");
				List<Map<String,String>> listItem=null;
				if(res4!=null){
					listItem=new ArrayList<Map<String,String>>();
					for(String addItem:res4){
						String[] item =addItem.split("@");
						Map<String,String> map=new HashMap<String,String>();
                        if(item.length>1) {
                            map.put("itemCode", item[0]);
                            map.put("itemName", item[1]);
                        }else {
                            map.put("itemCode", item[0]);
                            map.put("itemName", item[0]);
                        }
						listItem.add(map);
					}
				}
				mapList.put("addItem", listItem);
			}
			return mapList;
		} catch (Exception e) {
			CSLog.e("ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý³ï¿½ï¿½ï¿?",e.getMessage());
		}
		return null;
	}
	/**
	 * ï¿½ï¿½ï¿½ï¿½Å»Ý·ï¿½ï¿½ï¿?
	 * @param result
	 * @return
	 */
	public static String[] couponSplit(String result){
		if(ValueUtil.isEmpty(result)){
			return null;
		}
		String[] str=result.split("@");
		if(ValueUtil.isEmpty(str)||str.length<=0){
			return null;
		}
		String[] str1=str[1].split(";");
		if(ValueUtil.isEmpty(str1)||str1.length<=0){
			return null;
		}
		return str1;
	}
	
	public static HashMap<String, Object> regionAndTableReceiveXml(String result)
			throws ServerResponseException {
		ArrayList<Storetable> tables = null;
		ArrayList<Storearear> areas = null;
		HashMap<String, Object> hashmap = new HashMap<String, Object>();
		Storearear area = null;
		Storetable table = null;
		
		try {
			XmlPullParser parser = XmlPullParserFactory.newInstance().newPullParser();
			parser.setInput(new StringReader(result));
			int eventType = parser.getEventType();
			while (eventType != XmlPullParser.END_DOCUMENT) {
				String name = parser.getName();
				switch (eventType) {
				case XmlPullParser.START_DOCUMENT:
					break;
				case XmlPullParser.START_TAG:// ï¿½ï¿½Ê¼Ôªï¿½ï¿½ï¿½Â¼ï¿½
					if ("response".equalsIgnoreCase(name)) {
						String response = parser.nextText();
						if (!"00".equals(response)) {
							throw new ServerResponseException(
									"response error... the error code is "
											+ response, response);
						}
					} else if ("storearears".equalsIgnoreCase(name)) {//storearears
						areas = new ArrayList<Storearear>();
					} else if ("storearear".equalsIgnoreCase(name)) {
						area = new Storearear();
						area.setArearid(parser.getAttributeValue(null,"arearid"));
						area.setTblname(parser.getAttributeValue(null,"tblname"));
					} else if ("storetables".equalsIgnoreCase(name)) {
						tables = new ArrayList<Storetable>();
					} else if ("storetable".equalsIgnoreCase(name)) {
						table = new Storetable();
						table.setArearid(parser.getAttributeValue(null,"arearid"));
						table.setTablenum(parser.getAttributeValue(null,"tablenum"));
						table.setTblname(parser.getAttributeValue(null,"tblname"));
						table.setUsestate(parser.getAttributeValue(null,"usestate"));
					}
					break;
				case XmlPullParser.END_TAG:// ï¿½ï¿½ï¿½ï¿½Ôªï¿½ï¿½ï¿½Â¼ï¿½
					if("storearear".equalsIgnoreCase(name)){
						areas.add(area);
						area = null;
					}else if("storearears".equalsIgnoreCase(name)){
						hashmap.put("area", areas);
						areas = null;
					}else if("storetable".equalsIgnoreCase(name)){
						tables.add(table);
						table = null;
					}else if("storetables".equalsIgnoreCase(name)){
						hashmap.put("table", tables);
						tables = null;
					}
					break;
				}
				eventType = parser.next();// ï¿½ï¿½È¡ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Úµï¿½ï¿½Ö?
			}
		} catch (XmlPullParserException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return hashmap;

	}
	
	/**
	 * ï¿½ï¿½Æ·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð¡ï¿½ï¿½
	 * @param result
	 * @return
	 * @throws ServerResponseException
	 */
	public static HashMap<String, Object> grptypAndDishesReceiveXml(
			String result) throws ServerResponseException {
		ArrayList<Grptyp> grptyps = null;
		ArrayList<Dishes> dishelists = null;
		HashMap<String, Object> hashmap = new HashMap<String, Object>();
		Grptyp grptyp = null;
		Dishes dishes = null;

		try {
			XmlPullParser parser = XmlPullParserFactory.newInstance().newPullParser();
			parser.setInput(new StringReader(result));
			int eventType = parser.getEventType();
			while (eventType != XmlPullParser.END_DOCUMENT) {
				String name = parser.getName();
				switch (eventType) {
				case XmlPullParser.START_DOCUMENT:
					break;
				case XmlPullParser.START_TAG:// ï¿½ï¿½Ê¼Ôªï¿½ï¿½ï¿½Â¼ï¿½
					if ("response".equalsIgnoreCase(name)) {
						String response = parser.nextText();
						if (!"00".equals(response)) {
							throw new ServerResponseException(
									"response error... the error code is "
											+ response, response);
						}
					} else if ("classes".equalsIgnoreCase(name)) {
						grptyps = new ArrayList<Grptyp>();
					} else if ("class".equalsIgnoreCase(name)) {
						grptyp = new Grptyp();
//						grptyp.setCod(parser.getAttributeValue(null, "cod"));
						grptyp.setDes(parser.getAttributeValue(null, "des"));
					} else if ("products".equalsIgnoreCase(name)) {
						dishelists = new ArrayList<Dishes>();
					} else if ("product".equals(name)) {
						
						dishes = new Dishes();
						dishes.setId(parser.getAttributeValue(null,"pcode"));//id
						dishes.setName(parser.getAttributeValue(null,"pname"));//ï¿½ï¿½ï¿½ï¿½
						dishes.setPrice(parser.getAttributeValue(null,"price1"));//ï¿½Û¸ï¿½
						dishes.setUnit(parser.getAttributeValue(null,"unit"));//ï¿½ï¿½Î»
						dishes.setType(parser.getAttributeValue(null,"class"));	//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö´ï¿½ï¿½ï¿½
						dishes.setIsChecked("false");//ï¿½ï¿½ï¿½Ã¸ï¿½ï¿½ï¿½Î´Ñ¡ï¿½ï¿½×´Ì¬
					}
					break;
				case XmlPullParser.END_TAG:// ï¿½ï¿½ï¿½ï¿½Ôªï¿½ï¿½ï¿½Â¼ï¿½
					if("class".equalsIgnoreCase(name)){
						grptyps.add(grptyp);
						grptyp = null;
					}else if("classes".equalsIgnoreCase(name)){
						hashmap.put("grptyps", grptyps);
						grptyps = null;
					}else if("product".equalsIgnoreCase(name)){
						dishelists.add(dishes);
						dishes = null;
					}else if("products".equalsIgnoreCase(name)){
						hashmap.put("dishes", dishelists);
						dishelists = null;
					}
					break;
				}
				eventType = parser.next();// ï¿½ï¿½È¡ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Úµï¿½ï¿½Ö?
			}
		} catch (XmlPullParserException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return hashmap;

	}
	
	
	/**
	 * Ì¨Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	 * @param result
	 * @return
	 */
	public static ArrayList<Storetable> anaRegionAndTable(String result){
		String [] tables = ValueUtil.isEmpty(result)?null:result.split(";");
		ArrayList<Storetable> tableLists= new ArrayList<Storetable>();
		if(ValueUtil.isEmpty(tables)){
			return null;
		}
		for(String table:tables){
			String [] tableInfo=table.split("@");
			if(ValueUtil.isEmpty(tableInfo)||tableInfo.length<6){
				return null;
			}
			Storetable storeTable=new Storetable();
			storeTable.setFloorId(tableInfo[1]);//Â¥ï¿½ï¿½
			storeTable.setArearid(tableInfo[2]);//ï¿½ï¿½ï¿½ï¿½
			storeTable.setTablenum(tableInfo[3]);//Ì¨Î»ï¿½ï¿½ï¿½ï¿½
			storeTable.setUsestate(tableInfo[4]);//Ì¨Î»×´Ì¬
			storeTable.setTblname(tableInfo[5]);//Ì¨Î»ï¿½ï¿½ï¿?
			storeTable.setPerson(tableInfo[6]);//Ì¨Î»ï¿½ï¿½ï¿½ï¿½
			tableLists.add(storeTable);
		}
		return tableLists;
	}
	public static ArrayList<Storetable> anaTable(String result){
		
		ArrayList<Storetable> tableLists= new ArrayList<Storetable>();
		String[]tables = result.split(";");
		for(String table:tables){
//			0@FloorId@areaId@tablenum@tableState@tablename@person; 
			String[] variable= table.split("@");
			Storetable storeTable = new Storetable();
			storeTable.setArearid(variable[2]);
			storeTable.setTablenum(variable[3]);
			storeTable.setTblname(variable[5]);
			storeTable.setUsestate(variable[4]);
			tableLists.add(storeTable);
		}
		return tableLists;
	}
	public static Map<String,String> getOrderMs(String data){
//		0@H000152;4;@H000152;4;0#0#1212@1212
		String[] val=data.split("#");
		Map<String,String> map=new HashMap<String,String>();
		if(val.length>=2){
			String[] orders=val[0].split("@");
			if(val[1].equals("1")){//1Îªï¿½ï¿½Ô± 0ï¿½Ç»ï¿½Ô±
				map.put("member", val[2]);
			}else{
				map.put("member", "");
			}
			//-----------ï¿½Ëµï¿½ï¿½ï¿½Ï¢
			String[] order=orders[1].split(";");
			map.put("orderId", order[0]);
			map.put("manCs", order[1]);
			map.put("womanCs", order[2]);
			//-----------ï¿½ï¿½Ô±ï¿½ï¿½Ï¢
		}
		return map;
	}
	public static List<Map<String,String>> getReserveTable(String data){
		//0;18254109366;H000353;152;2;(null)@0;15011111111;H000362;154;2;0
		String[] res=data.split("@");
		List<Map<String,String>> list=new ArrayList<Map<String,String>>();
		for (String val : res) {
			String[] tableVal=val.split(";");
			if(tableVal.length<5){
				return null;
			}
			Map<String,String> map=new HashMap<String,String>();
			map.put("phone", tableVal[1]);
			map.put("orderId", tableVal[2]);
			map.put("tabNum", tableVal[3]);
			map.put("manNum", tableVal[4]);
			map.put("womanNum", tableVal.length==6?tableVal[5]:"0");
			list.add(map);
		}
		return list;
	}

	/*0@     		0
	orderid@		1
	PKID@			2
	pcode@			3
	PCname@			4
	tpcode@			5
	TPNAME @ 		6
	TPNUM@			7
	pcount@ 		8
	promonum  @		9
	fujiacode@ 		10
	fujianame   @	11
	price@ 			12
	fujiaprice@		13
	weight@			14
	weightflg@ 		15
	unit@			16
	ISTC@			17
	rushcount@		18
	pullcount@		19
	isquit@			20
	quitcause@		21
	rushorcall@		22
	eachprice*/		//23
	/*rushCount   ï¿½ß²Ë´ï¿½ï¿½ï¿½    
	pullCount   ï¿½ï¿½ï¿½Ëµï¿½ï¿½ï¿½ï¿½ï¿½    
	IsQuit       ï¿½Ë²Ë±ï¿½Ö¾ï¿½ï¿½ï¿½ï¿½ï¿½Ã²ï¿½ï¿½ï¿½ï¿½ËµÄ²ï¿½ 0ï¿½ï¿½ï¿½ï¿½ï¿? 1ï¿½ï¿½ 
	QuitCause    ï¿½Ë²ï¿½Ô­ï¿½ï¿½Ã»ï¿½Ð²ï¿½ï¿½ï¿½ï¿½Ø£ï¿½    
	rushOrCall   1 ï¿½ï¿½ï¿½ï¿½  2 ï¿½ï¿½ï¿½ï¿½  0 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö²ï¿½ï¿½ï¿½ï¿½ï¿½    
	eachPrice     ï¿½ï¿½ï¿½ï¿½

	fujiaCount   ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?  !  ï¿½ï¿½ï¿½ï¿½
   Sublistid   ï¿½×²ï¿½ï¿½ï¿½Ï¸Î¨Ò»ï¿½ï¿½Ê¶  ï¿½ï¿½ï¿½×²ï¿½ï¿½ï¿½Ï¸ï¿½ï¿½ï¿½Îªï¿½ï¿?
   UnitCode  ï¿½àµ¥Î»ï¿½ï¿½ï¿½ï¿½
   unitName  ï¿½àµ¥Î»ï¿½ï¿½ï¿?
   istemp    ï¿½Ç·ï¿½ï¿½ï¿½Ê±ï¿½ï¿½  0 ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½  1ï¿½ï¿½Ê±ï¿½ï¿½
	tempCode ï¿½ï¿½Ê±ï¿½Ë±ï¿½ï¿½ï¿½
   tempName ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿? */
	public static List<Food> getFoodList(String data){
		String[] res=data.split("##");
		List<Food> list=null;
		if(res.length>1){
			list=new ArrayList<Food>();
			String[] foods=res[0].split(";");
			for(String foodString:foods){
				String[] f=foodString.split("@");
				if(f[20].equals("0")){
					continue;
				}
				Food food=new Food();
				food.setOrderId(f[1]);
				food.setPKID(f[2]);
				food.setPcode(f[3]);
				food.setPcname(f[4]);
				food.setTpcode(f[5]);
				food.setTpname(f[6]);
				food.setTpnum(f[7]);
				food.setPcount(f[8]);
				food.setPromonum(f[9]);
				food.setFujiacode(f[10]);
				food.setFujianame(f[11]);
				food.setPrice(f[12]);
				food.setFujiaprice(f[13]);
				food.setWeight(f[14]);
				food.setWeightflg(f[15]);
				food.setUnit(f[16]);
				food.setIstc(f[17].equals("1") ? true : false);
				food.setUrge(f[18]);//ï¿½ß²Ë´ï¿½ï¿½ï¿½
				food.setOver(f[19]);//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
				food.setIsquit(f[20]);//ï¿½Ë²Ë±ï¿½Ê¶
				food.setQuitcause(f[21]);//ï¿½Ë²ï¿½Ô­ï¿½ï¿½
				food.setRushorcall(f[22]);//1 ï¿½ï¿½ï¿½ï¿½  2 ï¿½ï¿½ï¿½ï¿½  0 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö²ï¿½ï¿½ï¿½ï¿½ï¿½  
				food.setEachprice(f[23]);//ï¿½ï¿½ï¿½ï¿½
				food.setComfujiacount(f[24]);
				food.setIsTemp(ValueUtil.isNaNofInteger(f[28]));
				if(ValueUtil.isNotEmpty(f[26])){
					food.setUnit(f[27]);
					food.setUnitCode(f[26]);
				}
				if(f.length>29) {
					if(ValueUtil.isNotEmpty(f[29])) {
						food.setPcode(f[29]);
					}
					food.setTempName(f[30]);
				}
				list.add(food);
			}
		}
		return list;
	}
	public static ArrayList<Grptyp> getDishType(String data){
		ArrayList<Grptyp> al = new ArrayList<Grptyp>();
		String[] types = data.split("@");
		String [] grptyps = types[1].split(";");
		for(String str:grptyps){
			Grptyp grptyp = new Grptyp();
			String grp [] = str.split("-");
//			grptyp.setCod(grp[1]);
			grptyp.setDes(grp[0]);
			al.add(grptyp);
		}
		return al;
	}
	/**
	 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô±ï¿½ï¿½Ï¢
	 */
	public static Map<String,Object> getVipInfo(String result){
		try {
			String[] b=result.split("@");
			Map<String,Object> map=new HashMap<String,Object>();
			map.put("CardNumber", b[1]);//ï¿½ï¿½Ô±ï¿½ï¿½ï¿½ï¿½
			map.put("CardType", b[2]);//ï¿½ï¿½Ô±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
			map.put("StoredCardsBalance", b[3]);//ï¿½ï¿½Öµï¿½ï¿½ï¿?
			map.put("IntegralOverall", b[4]);//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
			map.put("CouponsOverall", b[5]);//È¯ï¿½ï¿½ï¿?
			map.put("CouponsAvail", b[6]);//È¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
			String q[]=b[7].split(";");//È¯ï¿½ï¿½Ï¢ï¿½Ð±ï¿½
			List<Map<String,String>> list=new ArrayList<Map<String,String>>();
			for(String quan:q){
				Map<String,String> m=new HashMap<String,String>();
				String [] qx=quan.split(",");
				m.put("Qid", qx[0]);
				m.put("Qmoney", ValueUtil.isNaNDoubleDiv(qx[1]).toString());
				m.put("Qname", qx[2]);
				m.put("Qnum", qx[3]);
				list.add(m);
			}
			map.put("TicketInfoList", list);
			if(b.length>8){
				map.put("pszName", b[8]);//ï¿½ï¿½ï¿½ï¿½
				map.put("pszGender", b[9]);//ï¿½Ô±ï¿½
				map.put("age", b[10]);//ï¿½ï¿½ï¿½ï¿½
				map.put("zhengjian", b[11]);//Ö¤ï¿½ï¿½ï¿½ï¿½
				map.put("beforeEmail", b[12]);//ï¿½ï¿½ï¿½ï¿½Ç°×º
				map.put("suffixEmail", b[13]);//ï¿½ï¿½ï¿½ï¿½ï¿½×?
				map.put("joinDate", b[14]);//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
			}else{
				map.put("pszName", "");//ï¿½ï¿½ï¿½ï¿½
				map.put("pszGender", "");//ï¿½Ô±ï¿½
				map.put("age", "");//ï¿½ï¿½ï¿½ï¿½
				map.put("zhengjian", "");//Ö¤ï¿½ï¿½ï¿½ï¿½
				map.put("beforeEmail", "");//ï¿½ï¿½ï¿½ï¿½Ç°×º
				map.put("suffixEmail", "");//ï¿½ï¿½ï¿½ï¿½ï¿½×?
				map.put("joinDate", "");//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
			}
			return map;
		} catch (Exception e) {
			Log.e("getVipInfo-ï¿½ï¿½Ô±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿??", e.getMessage());
		}
		return null;
	}

	/**
	 * ï¿½ï¿½ï¿½Ì¨Î»ï¿½Å»ï¿½È¡Ì¨Î»ï¿½ï¿½Ï?
	 * Ì¨Î»ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
	 * @param result
	 * @return
	 */
	public static List<Map<String,Object>> orderMsg(String result){
		String orders[]=result.split("&");
		try {
			if(orders!=null){
				List<Map<String,Object>> list=new ArrayList<Map<String, Object>>();
				for (int i=0;i<orders.length;i++) {
					Map<String, Object> map = new HashMap<String, Object>();
					String table[] = orders[i].split(";");
					map.put("orderid",table[0].split("@")[1]);    //ï¿½Ëµï¿½ï¿½ï¿½
					map.put("manCounts", table[1]);  //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
					map.put("womanCount", table[2]); //Å®ï¿½ï¿½ï¿½ï¿½
					map.put("peopleCount", table[3]);  //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
					map.put("tableState", table[4]);  //Ì¨Î»ï¿½Ç·ï¿½Õ¼ï¿½ï¿½  0 Î´Õ¼ï¿½ï¿½  1 Õ¼ï¿½ï¿½
					map.put("tableName", table[5]);  //ï¿½ï¿½Î»ï¿½ï¿½ï¿?
					String tableMsg[] = table[6].split("#");
					map.put("fengtaiyn", tableMsg[0]);//ï¿½Ç·ï¿½padÔ¤ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?   0 Ã»ï¿½ï¿½  1 ï¿½Ñ½ï¿½ï¿½ï¿½
					map.put("isHuiyuan", tableMsg[1]); //ï¿½Ç·ï¿½ï¿½Ç»ï¿½Ô± 0 ï¿½ï¿½ï¿½Ç»ï¿½Ô± 1 ï¿½Ç»ï¿½Ô± ï¿½ï¿½ï¿½ï¿½Ç·Ç»ï¿½Ô? ï¿½ï¿½Ú¶ï¿½ï¿½ï¿?#ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Îªï¿½ï¿½
					if (tableMsg.length > 2) {
						map.put("telNumber", tableMsg[2]);//ï¿½Ö»ï¿½ï¿½@ï¿½ï¿½Ô±ï¿½ï¿½ï¿½ï¿½Ï¢ ï¿½ï¿½ï¿½card_QueryBalance------ï¿½ï¿½Ñ¯ï¿½ï¿½Ô±ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½Ó¿Ú·ï¿½ï¿½ï¿½Öµ
					}
					list.add(map);
				}
				return list;
			}
		} catch (Exception e) {
			Log.e(TAG,"ï¿½ï¿½ï¿½Ì¨Î»ï¿½Å»ï¿½È¡ï¿½Ëµï¿½ï¿½ï¿½ï¿½?");
		}
		return null;
	}
}
